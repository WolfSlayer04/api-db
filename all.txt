routes\messages.js:
const express = require('express');
const Message = require('../models/Message');
const ServiceRequest = require('../models/ServiceRequest');
const { authenticateToken } = require('../middleware/auth');

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Messages
 *   description: Endpoints para la mensajería entre cliente y enfermero
 */

/**
 * @swagger
 * /messages:
 *   post:
 *     summary: Enviar un mensaje en una solicitud de servicio
 *     tags: [Messages]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               service_request_id:
 *                 type: string
 *                 description: "ID de la solicitud de servicio"
 *               receiver_id:
 *                 type: string
 *                 description: "ID del usuario receptor del mensaje"
 *               content:
 *                 type: string
 *                 description: "Contenido del mensaje"
 *     responses:
 *       201:
 *         description: Mensaje enviado exitosamente
 *       400:
 *         description: Error al enviar el mensaje
 */
router.post('/', authenticateToken, async (req, res) => {
  const { service_request_id, receiver_id, content } = req.body;

  try {
    // Verificar que el usuario está involucrado en la solicitud de servicio
    const serviceRequest = await ServiceRequest.findOne({
      _id: service_request_id,
      $or: [{ user_id: req.userId }, { nurse_id: req.userId }]
    });

    if (!serviceRequest) {
      return res.status(403).json({ message: 'Acceso denegado' });
    }

    // Crear y guardar el mensaje
    const message = new Message({
      service_request_id,
      sender_id: req.userId,
      receiver_id,
      content
    });

    await message.save();

    res.status(201).json({ message: 'Mensaje enviado exitosamente', messageData: message });
  } catch (error) {
    res.status(400).json({ message: 'Error al enviar el mensaje', error: error.message });
  }
});

/**
 * @swagger
 * /messages/{service_request_id}:
 *   get:
 *     summary: Obtener el historial de mensajes de una solicitud de servicio con paginación
 *     tags: [Messages]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: service_request_id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID de la solicitud de servicio
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Número de página (por defecto 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: Número de resultados por página (por defecto 10)
 *     responses:
 *       200:
 *         description: Historial de mensajes de la solicitud de servicio
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 total:
 *                   type: integer
 *                 page:
 *                   type: integer
 *                 limit:
 *                   type: integer
 *                 messages:
 *                   type: array
 *                   items:
 *                     properties:
 *                       sender_id:
 *                         type: string
 *                       receiver_id:
 *                         type: string
 *                       content:
 *                         type: string
 *                       timestamp:
 *                         type: string
 *                         format: date-time
 *       403:
 *         description: Acceso denegado
 */
router.get('/:service_request_id', authenticateToken, async (req, res) => {
  const { page = 1, limit = 10 } = req.query;

  try {
    // Verificar que el usuario está involucrado en la solicitud de servicio
    const serviceRequest = await ServiceRequest.findOne({
      _id: req.params.service_request_id,
      $or: [{ user_id: req.userId }, { nurse_id: req.userId }]
    });

    if (!serviceRequest) {
      return res.status(403).json({ message: 'Acceso denegado' });
    }

    const skip = (page - 1) * limit;

    // Obtener total de mensajes y mensajes paginados
    const [total, messages] = await Promise.all([
      Message.countDocuments({ service_request_id: req.params.service_request_id }),
      Message.find({ service_request_id: req.params.service_request_id })
        .sort({ timestamp: 1 }) // Ordenar por fecha de creación
        .skip(skip) // Saltar registros para paginación
        .limit(Number(limit)) // Límite de registros por página
    ]);

    res.status(200).json({
      total, // Total de mensajes
      page: Number(page), // Página actual
      limit: Number(limit), // Límite por página
      messages // Lista de mensajes
    });
  } catch (error) {
    res.status(400).json({ message: 'Error al obtener el historial de mensajes', error: error.message });
  }
});

module.exports = router;
routes\nurses.js:
const express = require('express');
const Nurse = require('../models/Nurse');
const { authenticateToken, generateToken } = require('../middleware/auth');

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Nurses
 *   description: Endpoints para la gestión de enfermeros
 */

/**
 * @swagger
 * /nurses:
 *   get:
 *     summary: Obtener enfermeros (sin datos sensibles) con paginación
 *     tags: [Nurses]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Número de página (por defecto 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: Número de resultados por página (por defecto 10)
 *     responses:
 *       200:
 *         description: Lista de enfermeros
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 total:
 *                   type: integer
 *                 page:
 *                   type: integer
 *                 limit:
 *                   type: integer
 *                 nurses:
 *                   type: array
 *                   items:
 *                     properties:
 *                       name:
 *                         type: string
 *                       fecha_nacimiento:
 *                         type: string
 *                       genero:
 *                         type: string
 *                       descripcion:
 *                         type: string
 *                       especialidad:
 *                         type: string
 *                       ubicacion:
 *                         type: string
 *                       tarifa:
 *                         type: number
 *                       disponibilidad:
 *                         type: array
 *                         items:
 *                           type: string
 *                       certificados:
 *                         type: array
 *                         items:
 *                           type: string
 *       500:
 *         description: Error en el servidor
 */
router.get('/', authenticateToken, async (req, res) => {
  const { page = 1, limit = 10 } = req.query;

  try {
    const skip = (page - 1) * limit;

    const [total, nurses] = await Promise.all([
      Nurse.countDocuments(), // Total de enfermeros
      Nurse.find({}, '-user_name -password -_id') // Excluir campos sensibles
        .skip(skip) // Paginación: saltar registros
        .limit(Number(limit)) // Límite por página
    ]);

    res.status(200).json({
      total, // Total de enfermeros
      page: Number(page), // Página actual
      limit: Number(limit), // Límite por página
      nurses // Lista de enfermeros
    });
  } catch (error) {
    res.status(500).json({ message: 'Error en el servidor', error: error.message });
  }
});

/**
 * @swagger
 * /nurses/search:
 *   get:
 *     summary: Búsqueda de enfermeros con filtros y paginación
 *     tags: [Nurses]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: especialidad
 *         schema:
 *           type: string
 *         description: Especialidad del enfermero (p. ej., geriatría, cuidados intensivos)
 *       - in: query
 *         name: ubicacion
 *         schema:
 *           type: string
 *         description: Ubicación del enfermero para facilitar desplazamientos
 *       - in: query
 *         name: tarifa
 *         schema:
 *           type: number
 *         description: Tarifa máxima diaria del enfermero
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Número de página (por defecto 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: Número de resultados por página (por defecto 10)
 *     responses:
 *       200:
 *         description: Lista de enfermeros que cumplen con los filtros
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 total:
 *                   type: integer
 *                 page:
 *                   type: integer
 *                 limit:
 *                   type: integer
 *                 nurses:
 *                   type: array
 *                   items:
 *                     properties:
 *                       name:
 *                         type: string
 *                       especialidad:
 *                         type: string
 *                       ubicacion:
 *                         type: string
 *                       tarifa:
 *                         type: number
 *       500:
 *         description: Error en el servidor
 */
router.get('/search', authenticateToken, async (req, res) => {
  const { especialidad, ubicacion, tarifa, page = 1, limit = 10 } = req.query;

  const filters = {};
  if (especialidad) filters.especialidad = especialidad;
  if (ubicacion) filters.ubicacion = ubicacion;
  if (tarifa) filters.tarifa = { $lte: tarifa };

  try {
    const skip = (page - 1) * limit;

    const [total, nurses] = await Promise.all([
      Nurse.countDocuments(filters), // Total de enfermeros que cumplen con los filtros
      Nurse.find(filters, '-user_name -password -_id') // Excluir campos sensibles
        .skip(skip) // Paginación
        .limit(Number(limit)) // Límite por página
    ]);

    res.status(200).json({
      total, // Total de resultados
      page: Number(page), // Página actual
      limit: Number(limit), // Límite por página
      nurses // Lista de enfermeros
    });
  } catch (error) {
    res.status(500).json({ message: 'Error en el servidor', error: error.message });
  }
});

// Los demás endpoints permanecen sin cambios

/**
 * @swagger
 * /nurses/register:
 *   post:
 *     summary: Registro de enfermero
 *     tags: [Nurses]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 example: "Juan Pérez"
 *               fecha_nacimiento:
 *                 type: string
 *                 format: date
 *                 example: "1990-05-15"
 *               genero:
 *                 type: string
 *                 example: "Masculino"
 *               especialidad:
 *                 type: string
 *                 example: "Geriatría"
 *               ubicacion:
 *                 type: string
 *                 example: "Madrid"
 *               tarifa:
 *                 type: number
 *                 example: 50
 *               disponibilidad:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     dia:
 *                       type: string
 *                       example: "Lunes"
 *                     horaInicio:
 *                       type: string
 *                       example: "08:00"
 *                     horaFin:
 *                       type: string
 *                       example: "17:00"
 *               user_name:
 *                 type: string
 *                 example: "juanperez"
 *               password:
 *                 type: string
 *                 example: "password123"
 *     responses:
 *       201:
 *         description: Enfermero registrado exitosamente
 *       400:
 *         description: Error en el registro del enfermero
 */

router.post('/register', async (req, res) => {
  try {
    const {
      name,
      fecha_nacimiento,
      genero,
      especialidad,
      ubicacion,
      tarifa,
      disponibilidad,
      user_name,
      password,
      descripcion,
      certificados
    } = req.body;

    const newNurse = new Nurse({
      name,
      fecha_nacimiento,
      genero,
      especialidad,
      ubicacion,
      tarifa,
      disponibilidad,
      user_name,
      password,
      descripcion,
      certificados
    });

    await newNurse.save();

    const token = generateToken(newNurse._id);
    res.status(201).json({
      message: 'Enfermero registrado exitosamente',
      nurse: newNurse,
      token: `Bearer ${token}`
    });
  } catch (error) {
    res.status(400).json({ message: 'Error en el registro del enfermero', error: error.message });
  }
});
/**
 * @swagger
 * /nurses/login:
 *   post:
 *     summary: Inicio de sesión de enfermero
 *     tags: [Nurses]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               user_name:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: Inicio de sesión exitoso
 *       401:
 *         description: Credenciales incorrectas
 */
router.post('/login', async (req, res) => {
  const { user_name, password } = req.body;

  try {
    const nurse = await Nurse.findOne({ user_name, password });
    if (!nurse) {
      return res.status(401).json({ message: 'Credenciales incorrectas' });
    }

    const token = generateToken({ userId: nurse._id, role: 'enfermero' });
    res.json({ token, role: 'enfermero' });
  } catch (error) {
    res.status(500).json({ message: 'Error en el inicio de sesión', error: error.message });
  }
});

module.exports = router;
routes\patients.js:
const express = require('express');
const Patient = require('../models/Patient');
const { authenticateToken } = require('../middleware/auth');

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Patients
 *   description: Endpoints para la gestión de pacientes
 */

/**
 * @swagger
 * /patients:
 *   get:
 *     summary: Obtener pacientes del usuario autenticado con paginación
 *     tags: [Patients]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: user_id
 *         schema:
 *           type: string
 *         description: ID del usuario
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Número de la página (por defecto 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: Número de elementos por página (por defecto 10)
 *     responses:
 *       200:
 *         description: Lista de pacientes del usuario autenticado
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 total:
 *                   type: integer
 *                   description: Número total de pacientes
 *                 page:
 *                   type: integer
 *                   description: Página actual
 *                 limit:
 *                   type: integer
 *                   description: Límite de pacientes por página
 *                 patients:
 *                   type: array
 *                   items:
 *                     properties:
 *                       name:
 *                         type: string
 *                       fecha_nacimiento:
 *                         type: string
 *                       genero:
 *                         type: string
 *                       movilidad:
 *                         type: string
 *                       descripcion:
 *                         type: string
 *       400:
 *         description: Error en la solicitud
 *       500:
 *         description: Error al obtener los pacientes
 */
router.get('/', authenticateToken, async (req, res) => {
  const { user_id, page = 1, limit = 10 } = req.query;

  if (!user_id) {
    return res.status(400).json({ message: 'El campo user_id es obligatorio' });
  }

  try {
    const skip = (page - 1) * limit;

    const [total, patients] = await Promise.all([
      Patient.countDocuments({ usuario_id: user_id }),
      Patient.find({ usuario_id: user_id })
        .skip(skip)
        .limit(Number(limit))
    ]);

    const patientsWithoutID = patients.map(patient => {
      const { _id, ...patientData } = patient.toObject();
      return patientData;
    });

    res.status(200).json({
      total,
      page: Number(page),
      limit: Number(limit),
      patients: patientsWithoutID
    });
  } catch (error) {
    res.status(500).json({ message: 'Error al obtener los pacientes', error: error.message });
  }
});

/**
 * @swagger
 * /patients:
 *   post:
 *     summary: Agregar un nuevo paciente
 *     tags: [Patients]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               user_id:
 *                 type: string
 *                 description: ID del usuario
 *               name:
 *                 type: string
 *               fecha_nacimiento:
 *                 type: string
 *               genero:
 *                 type: string
 *               movilidad:
 *                 type: string
 *               descripcion:
 *                 type: string
 *     responses:
 *       201:
 *         description: Paciente agregado exitosamente
 *       400:
 *         description: Error al crear el paciente
 */
router.post('/', authenticateToken, async (req, res) => {
  const { user_id, name, fecha_nacimiento, genero, movilidad, descripcion } = req.body;

  if (!user_id) {
    return res.status(400).json({ message: 'El campo user_id es obligatorio' });
  }

  try {
    const newPatient = new Patient({
      usuario_id: user_id,
      name,
      fecha_nacimiento,
      genero,
      movilidad,
      descripcion
    });

    await newPatient.save();

    const { _id, ...patientData } = newPatient.toObject(); // Excluir `_id` de la respuesta
    res.status(201).json(patientData);
  } catch (error) {
    res.status(400).json({ message: 'Error al crear el paciente', error: error.message });
  }
});

module.exports = router;
routes\reviews.js:
const express = require('express');
const ServiceRequest = require('../models/ServiceRequest');
const Patient = require('../models/Patient');
const User = require('../models/User');
const Nurse = require('../models/Nurse');
const { authenticateToken } = require('../middleware/auth');

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: ServiceRequests
 *   description: Endpoints para la gestión de solicitudes de servicio de enfermería
 */

/**
 * @swagger
 * /service-requests:
 *   post:
 *     summary: Crear una nueva solicitud de servicio
 *     tags: [ServiceRequests]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               nurse_id:
 *                 type: string
 *                 description: "ID del enfermero asignado"
 *               patient_ids:
 *                 type: array
 *                 items:
 *                   type: string
 *                 description: "IDs de los pacientes seleccionados para el servicio"
 *               detalles:
 *                 type: string
 *               fecha:
 *                 type: string
 *                 format: date
 *               tarifa:
 *                 type: number
 *     responses:
 *       201:
 *         description: Solicitud de servicio creada exitosamente
 *       400:
 *         description: Error al crear la solicitud de servicio
 */
router.post('/', authenticateToken, async (req, res) => {
  const { nurse_id, patient_ids, detalles, fecha, tarifa } = req.body;

  try {
    // Verificar que los pacientes pertenecen al usuario autenticado
    const validPatients = await Patient.find({ _id: { $in: patient_ids }, usuario_id: req.userId });
    if (validPatients.length !== patient_ids.length) {
      return res.status(403).json({ message: 'Acceso denegado a uno o más pacientes seleccionados' });
    }

    const newRequest = new ServiceRequest({
      user_id: req.userId,
      nurse_id,
      patient_ids,
      detalles,
      fecha,
      tarifa
    });

    await newRequest.save();
    res.status(201).json(newRequest);
  } catch (error) {
    res.status(400).json({ message: 'Error al crear la solicitud de servicio', error: error.message });
  }
});

/**
 * @swagger
 * /service-requests:
 *   get:
 *     summary: Obtener todas las solicitudes del usuario o enfermero autenticado con paginación
 *     tags: [ServiceRequests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: estado
 *         schema:
 *           type: string
 *           enum: [pendiente, aceptada, completada]
 *         description: Filtrar solicitudes por estado
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Número de la página (por defecto 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: Número de elementos por página (por defecto 10)
 *     responses:
 *       200:
 *         description: Lista de solicitudes de servicio
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 total:
 *                   type: integer
 *                 page:
 *                   type: integer
 *                 limit:
 *                   type: integer
 *                 requests:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/ServiceRequest'
 *       500:
 *         description: Error al obtener las solicitudes
 */
router.get('/', authenticateToken, async (req, res) => {
  const { estado, page = 1, limit = 10 } = req.query;

  try {
    const filter = {
      $or: [{ user_id: req.userId }, { nurse_id: req.userId }]
    };

    if (estado) {
      filter.estado = estado;
    }

    const skip = (page - 1) * limit;

    const [total, requests] = await Promise.all([
      ServiceRequest.countDocuments(filter),
      ServiceRequest.find(filter)
        .skip(skip)
        .limit(Number(limit))
        .populate('patient_ids', 'name fecha_nacimiento genero descripcion')
    ]);

    res.status(200).json({
      total,
      page: Number(page),
      limit: Number(limit),
      requests
    });
  } catch (error) {
    res.status(500).json({ message: 'Error al obtener las solicitudes', error: error.message });
  }
});

/**
 * @swagger
 * /service-requests/{id}:
 *   put:
 *     summary: Actualizar el estado de una solicitud
 *     tags: [ServiceRequests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID de la solicitud de servicio
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               estado:
 *                 type: string
 *                 enum: [pendiente, aceptada, rechazada, completada]
 *                 description: Nuevo estado de la solicitud
 *     responses:
 *       200:
 *         description: Estado de la solicitud actualizado exitosamente
 *       400:
 *         description: Error al actualizar la solicitud
 */
router.put('/:id', authenticateToken, async (req, res) => {
  const { estado } = req.body;

  if (!['pendiente', 'aceptada', 'rechazada', 'completada'].includes(estado)) {
    return res.status(400).json({ message: 'Estado inválido' });
  }

  try {
    const serviceRequest = await ServiceRequest.findOneAndUpdate(
      { _id: req.params.id, nurse_id: req.userId },
      { estado },
      { new: true }
    );

    if (!serviceRequest) {
      return res.status(404).json({ message: 'Solicitud de servicio no encontrada' });
    }

    res.status(200).json({ message: `Solicitud ${estado} exitosamente`, serviceRequest });
  } catch (error) {
    res.status(400).json({ message: 'Error al actualizar la solicitud', error: error.message });
  }
});

/**
 * @swagger
 * /service-requests/{id}:
 *   get:
 *     summary: Obtener detalles de una solicitud específica
 *     tags: [ServiceRequests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID de la solicitud
 *     responses:
 *       200:
 *         description: Detalles de la solicitud
 *       404:
 *         description: Solicitud no encontrada
 */
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    const serviceRequest = await ServiceRequest.findOne({
      _id: req.params.id,
      $or: [{ user_id: req.userId }, { nurse_id: req.userId }]
    }).populate('patient_ids', 'name fecha_nacimiento genero descripcion');

    if (!serviceRequest) {
      return res.status(404).json({ message: 'Solicitud no encontrada' });
    }

    res.status(200).json(serviceRequest);
  } catch (error) {
    res.status(500).json({ message: 'Error al obtener los detalles de la solicitud', error: error.message });
  }
});

module.exports = router;
routes\serviceRequests.js:
const express = require('express');
const ServiceRequest = require('../models/ServiceRequest');
const Patient = require('../models/Patient');
const User = require('../models/User');
const Nurse = require('../models/Nurse');
const { authenticateToken } = require('../middleware/auth');

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: ServiceRequests
 *   description: Endpoints para la gestión de solicitudes de servicio de enfermería
 */

/**
 * @swagger
 * /service-requests:
 *   post:
 *     summary: Crear una nueva solicitud de servicio
 *     tags: [ServiceRequests]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               nurse_id:
 *                 type: string
 *                 description: "ID del enfermero asignado"
 *               patient_ids:
 *                 type: array
 *                 items:
 *                   type: string
 *                 description: "IDs de los pacientes seleccionados para el servicio"
 *               detalles:
 *                 type: string
 *               fecha:
 *                 type: string
 *                 format: date
 *               tarifa:
 *                 type: number
 *     responses:
 *       201:
 *         description: Solicitud de servicio creada exitosamente
 *       400:
 *         description: Error al crear la solicitud de servicio
 */
router.post('/', authenticateToken, async (req, res) => {
  const { nurse_id, patient_ids, detalles, fecha, tarifa } = req.body;

  try {
    // Verificar que los pacientes pertenecen al usuario autenticado
    const validPatients = await Patient.find({ _id: { $in: patient_ids }, usuario_id: req.userId });
    if (validPatients.length !== patient_ids.length) {
      return res.status(403).json({ message: 'Acceso denegado a uno o más pacientes seleccionados' });
    }

    const newRequest = new ServiceRequest({
      user_id: req.userId,
      nurse_id,
      patient_ids,
      detalles,
      fecha,
      tarifa
    });

    await newRequest.save();
    res.status(201).json(newRequest);
  } catch (error) {
    res.status(400).json({ message: 'Error al crear la solicitud de servicio', error: error.message });
  }
});

/**
 * @swagger
 * /service-requests:
 *   get:
 *     summary: Obtener todas las solicitudes del usuario o enfermero autenticado con paginación
 *     tags: [ServiceRequests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: estado
 *         schema:
 *           type: string
 *           enum: [pendiente, aceptada, completada]
 *         description: Filtrar solicitudes por estado
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Número de la página (por defecto 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: Número de elementos por página (por defecto 10)
 *     responses:
 *       200:
 *         description: Lista de solicitudes de servicio
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 total:
 *                   type: integer
 *                 page:
 *                   type: integer
 *                 limit:
 *                   type: integer
 *                 requests:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/ServiceRequest'
 *       500:
 *         description: Error al obtener las solicitudes
 */
router.get('/', authenticateToken, async (req, res) => {
  const { estado, page = 1, limit = 10 } = req.query;

  try {
    const filter = {
      $or: [{ user_id: req.userId }, { nurse_id: req.userId }]
    };

    if (estado) {
      filter.estado = estado;
    }

    const skip = (page - 1) * limit;

    const [total, requests] = await Promise.all([
      ServiceRequest.countDocuments(filter),
      ServiceRequest.find(filter)
        .skip(skip)
        .limit(Number(limit))
        .populate('patient_ids', 'name fecha_nacimiento genero descripcion')
    ]);

    res.status(200).json({
      total,
      page: Number(page),
      limit: Number(limit),
      requests
    });
  } catch (error) {
    res.status(500).json({ message: 'Error al obtener las solicitudes', error: error.message });
  }
});

/**
 * @swagger
 * /service-requests/{id}:
 *   put:
 *     summary: Actualizar el estado de una solicitud
 *     tags: [ServiceRequests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID de la solicitud de servicio
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               estado:
 *                 type: string
 *                 enum: [pendiente, aceptada, rechazada, completada]
 *                 description: Nuevo estado de la solicitud
 *     responses:
 *       200:
 *         description: Estado de la solicitud actualizado exitosamente
 *       400:
 *         description: Error al actualizar la solicitud
 */
router.put('/:id', authenticateToken, async (req, res) => {
  const { estado } = req.body;

  if (!['pendiente', 'aceptada', 'rechazada', 'completada'].includes(estado)) {
    return res.status(400).json({ message: 'Estado inválido' });
  }

  try {
    const serviceRequest = await ServiceRequest.findOneAndUpdate(
      { _id: req.params.id, nurse_id: req.userId },
      { estado },
      { new: true }
    );

    if (!serviceRequest) {
      return res.status(404).json({ message: 'Solicitud de servicio no encontrada' });
    }

    res.status(200).json({ message: `Solicitud ${estado} exitosamente`, serviceRequest });
  } catch (error) {
    res.status(400).json({ message: 'Error al actualizar la solicitud', error: error.message });
  }
});

/**
 * @swagger
 * /service-requests/{id}:
 *   get:
 *     summary: Obtener detalles de una solicitud específica
 *     tags: [ServiceRequests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID de la solicitud
 *     responses:
 *       200:
 *         description: Detalles de la solicitud
 *       404:
 *         description: Solicitud no encontrada
 */
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    const serviceRequest = await ServiceRequest.findOne({
      _id: req.params.id,
      $or: [{ user_id: req.userId }, { nurse_id: req.userId }]
    }).populate('patient_ids', 'name fecha_nacimiento genero descripcion');

    if (!serviceRequest) {
      return res.status(404).json({ message: 'Solicitud no encontrada' });
    }

    res.status(200).json(serviceRequest);
  } catch (error) {
    res.status(500).json({ message: 'Error al obtener los detalles de la solicitud', error: error.message });
  }
});

module.exports = router;
routes\support.js:
const express = require('express');
const FAQ = require('../models/FAQ');
const SupportRequest = require('../models/SupportRequest');
const { authenticateToken } = require('../middleware/auth');

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Support
 *   description: Endpoints para soporte técnico y ayuda
 */

/**
 * @swagger
 * /support/faq:
 *   get:
 *     summary: Obtener la lista de preguntas frecuentes (FAQ) con paginación
 *     tags: [Support]
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Número de la página (por defecto 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: Número de elementos por página (por defecto 10)
 *     responses:
 *       200:
 *         description: Lista de preguntas frecuentes
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 total:
 *                   type: integer
 *                   description: Total de preguntas frecuentes
 *                 page:
 *                   type: integer
 *                   description: Página actual
 *                 limit:
 *                   type: integer
 *                   description: Límite de preguntas por página
 *                 faqs:
 *                   type: array
 *                   items:
 *                     properties:
 *                       pregunta:
 *                         type: string
 *                       respuesta:
 *                         type: string
 */
router.get('/faq', async (req, res) => {
  try {
    const { page = 1, limit = 10 } = req.query;
    const skip = (page - 1) * limit;

    const faqs = await FAQ.find().skip(skip).limit(Number(limit));
    const total = await FAQ.countDocuments();

    res.status(200).json({
      total,
      page: Number(page),
      limit: Number(limit),
      faqs
    });
  } catch (error) {
    res.status(500).json({ message: 'Error al obtener las preguntas frecuentes', error: error.message });
  }
});

/**
 * @swagger
 * /support/request:
 *   post:
 *     summary: Enviar una solicitud de soporte técnico
 *     tags: [Support]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               asunto:
 *                 type: string
 *                 description: "Asunto de la solicitud de soporte"
 *               mensaje:
 *                 type: string
 *                 description: "Descripción detallada del problema"
 *     responses:
 *       201:
 *         description: Solicitud de soporte enviada exitosamente
 *       400:
 *         description: Error al enviar la solicitud de soporte
 */
router.post('/request', authenticateToken, async (req, res) => {
  const { asunto, mensaje } = req.body;

  try {
    if (!asunto || !mensaje) {
      return res.status(400).json({ message: 'El asunto y el mensaje son obligatorios' });
    }

    const supportRequest = new SupportRequest({
      user_id: req.userId,
      tipo_usuario: req.userRole, // Asume que el middleware agrega el rol
      asunto,
      mensaje
    });

    await supportRequest.save();

    res.status(201).json({
      message: 'Solicitud de soporte enviada exitosamente',
      supportRequest
    });
  } catch (error) {
    res.status(400).json({ message: 'Error al enviar la solicitud de soporte', error: error.message });
  }
});

module.exports = router;
routes\transactions.js:
const express = require('express');
const Transaction = require('../models/Transaction');
const { authenticateToken } = require('../middleware/auth');

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Transactions
 *   description: Endpoints para la gestión de pagos y facturación
 */

/**
 * @swagger
 * /transactions:
 *   get:
 *     summary: Obtener el historial de pagos recibidos por el enfermero con paginación
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Número de la página (por defecto 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: Número de elementos por página (por defecto 10)
 *     responses:
 *       200:
 *         description: Historial de pagos del enfermero con paginación
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 total:
 *                   type: integer
 *                   description: Número total de transacciones
 *                 page:
 *                   type: integer
 *                   description: Página actual
 *                 limit:
 *                   type: integer
 *                   description: Límite de elementos por página
 *                 transactions:
 *                   type: array
 *                   items:
 *                     properties:
 *                       service_request_id:
 *                         type: string
 *                       monto:
 *                         type: number
 *                       fecha_pago:
 *                         type: string
 *                         format: date-time
 *                       estado:
 *                         type: string
 *       403:
 *         description: Acceso denegado
 *       500:
 *         description: Error en el servidor
 */
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { page = 1, limit = 10 } = req.query;

    // Calcular el índice de inicio
    const skip = (page - 1) * limit;

    // Obtener transacciones con paginación
    const transactions = await Transaction.find({ nurse_id: req.userId })
      .sort({ fecha_pago: -1 })
      .skip(skip)
      .limit(Number(limit));

    // Contar el total de transacciones
    const total = await Transaction.countDocuments({ nurse_id: req.userId });

    res.status(200).json({
      total,
      page: Number(page),
      limit: Number(limit),
      transactions
    });
  } catch (error) {
    res.status(500).json({ message: 'Error al obtener el historial de pagos', error: error.message });
  }
});

/**
 * @swagger
 * /transactions/{id}/factura:
 *   post:
 *     summary: Generar una factura para un usuario
 *     tags: [Transactions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID de la transacción
 *     responses:
 *       200:
 *         description: Factura generada y enviada exitosamente
 *       404:
 *         description: Transacción no encontrada
 *       403:
 *         description: Acceso denegado
 */
router.post('/:id/factura', authenticateToken, async (req, res) => {
  try {
    // Verificar que la transacción pertenece al enfermero autenticado
    const transaction = await Transaction.findOne({ _id: req.params.id, nurse_id: req.userId });

    if (!transaction) {
      return res.status(404).json({ message: 'Transacción no encontrada o acceso denegado' });
    }

    // Generar la factura (simulado aquí)
    const factura = {
      nurse_id: transaction.nurse_id,
      user_id: transaction.user_id,
      service_request_id: transaction.service_request_id,
      monto: transaction.monto,
      fecha_pago: transaction.fecha_pago,
      estado: transaction.estado,
      fecha_factura: new Date(),
      detalles: 'Servicio de enfermería proporcionado' // Personalizable
    };

    // Responder con la factura generada
    res.status(200).json({ message: 'Factura generada y enviada exitosamente', factura });
  } catch (error) {
    res.status(500).json({ message: 'Error al generar la factura', error: error.message });
  }
});

module.exports = router;

routes\users.js:
const express = require('express');
const User = require('../models/User');
const { generateToken, authenticateToken } = require('../middleware/auth');

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Users
 *   description: Endpoints para la gestión de usuarios
 */

/**
 * @swagger
 * /users/register:
 *   post:
 *     summary: Registro de usuario
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               user_name:
 *                 type: string
 *               password:
 *                 type: string
 *               foto:
 *                 type: string
 *               verificado:
 *                 type: string
 *     responses:
 *       201:
 *         description: Usuario registrado exitosamente
 *       400:
 *         description: Error en el registro
 */
router.post('/register', async (req, res) => {
  try {
    const newUser = new User(req.body);
    await newUser.save();
    const token = generateToken(newUser._id);
    res.status(201).json({ user: newUser, token });
  } catch (error) {
    res.status(400).json({ message: 'Error al registrar el usuario', error: error.message });
  }
});

/**
 * @swagger
 * /users/login:
 *   post:
 *     summary: Inicio de sesión de usuario
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               user_name:
 *                 type: string
 *                 description: "Nombre de usuario o correo electrónico del usuario"
 *               password:
 *                 type: string
 *                 description: "Contraseña del usuario"
 *     responses:
 *       200:
 *         description: Inicio de sesión exitoso
 *       401:
 *         description: Credenciales incorrectas
 */
router.post('/login', async (req, res) => {
  const { user_name, password } = req.body;

  try {
    const user = await User.findOne({ user_name, password });
    if (!user) {
      return res.status(401).json({ message: 'Credenciales incorrectas' });
    }

    const token = generateToken({ userId: user._id, role: 'usuario' });
    res.json({ token, role: 'usuario' });
  } catch (error) {
    res.status(500).json({ message: 'Error en el inicio de sesión', error: error.message });
  }
});

/**
 * @swagger
 * /users:
 *   get:
 *     summary: Obtener una lista de usuarios con paginación
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Número de la página (por defecto 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: Número de elementos por página (por defecto 10)
 *     responses:
 *       200:
 *         description: Lista de usuarios con paginación
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 total:
 *                   type: integer
 *                   description: Número total de usuarios
 *                 page:
 *                   type: integer
 *                   description: Página actual
 *                 limit:
 *                   type: integer
 *                   description: Límite de elementos por página
 *                 users:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/User'
 *       500:
 *         description: Error del servidor
 */
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { page = 1, limit = 10 } = req.query;

    const skip = (page - 1) * limit;

    const users = await User.find()
      .skip(skip)
      .limit(Number(limit));

    const total = await User.countDocuments();

    res.status(200).json({
      total,
      page: Number(page),
      limit: Number(limit),
      users
    });
  } catch (error) {
    res.status(500).json({ message: 'Error en el servidor', error: error.message });
  }
});

/**
 * @swagger
 * /users/panel:
 *   get:
 *     summary: Acceso al panel principal del usuario
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Acceso al panel principal del usuario autenticado
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Bienvenido al panel principal"
 *                 opciones:
 *                   type: array
 *                   items:
 *                     type: string
 *                   example: ["Buscar Enfermeros", "Mis Pacientes"]
 *       401:
 *         description: No autorizado, token no proporcionado o inválido
 */
router.get('/panel', authenticateToken, (req, res) => {
  res.status(200).json({
    message: "Bienvenido al panel principal",
    opciones: ["Buscar Enfermeros", "Mis Pacientes"]
  });
});

module.exports = router;
